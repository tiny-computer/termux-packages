Only in ../../src/: commands-aarch64-termux-root.h
diff -u -r ./generate-db.js ../../src/generate-db.js
--- ./generate-db.js	2025-07-01 08:12:10.000000000 +0000
+++ ../../src/generate-db.js	2025-07-05 10:24:11.158542740 +0000
@@ -1,10 +1,11 @@
 #!/usr/bin/env node
 import { glob, readFile, writeFile } from "node:fs/promises";
-import { gunzip } from "node:zlib";
+import { exec } from 'node:child_process';
+import { readFileSync } from 'node:fs';
 import { join } from "node:path";
 import { promisify } from "node:util";
 
-const gunzipAsync = promisify(gunzip);
+const execAsync = promisify(exec);
 
 const { TERMUX_SCRIPTDIR, TERMUX_PREFIX, TERMUX_ARCH } = process.env;
 
@@ -140,22 +141,17 @@
 
 async function processRepo(repo, repoPath, arch) {
   // Fetch the Contents.gz file for the given architecture from the apt mirror
-  const url = `${repo.url}/dists/${repo.distribution}/Contents-${arch}.gz`;
-  const response = await fetch(url);
+  const command = `curl --silent ${repo.url}/dists/${repo.distribution}/Contents-${arch}.xz | xzcat -`;
+	console.log(command);
 
-  if (!response.ok) {
-    throw new Error(`${url} returned ${response.status}`);
-  }
-
-  // Since we are using a gzip file, we need to decompress it
-  const data = await gunzipAsync(await response.arrayBuffer());
+  const { error, stdout, stderr } = await execAsync(command, {maxBuffer: 100 * 1024 * 1024});
   // Convert to string and split by new lines
   // Each line is of the format:
   // "path/to/file package"
   //
   // Where `path/to/file` is the path to the file in the package, and `package`
   // is the name of the package that provides this file.
-  const lines = data.toString().split("\n");
+  const lines = stdout.split("\n");
 
   // Stores mappings of binary names to package names
   // The key is the binary name, and the value is an array of package names
@@ -208,7 +204,7 @@
 
         const packageName = fileMap.get(join(TERMUX_PREFIX.substring(1), path));
         if (packageName === undefined) {
-          console.error(`Package name not found for path: ${path}`);
+          console.error(`Package name not found for path: ${path} (resolved to): ` + join(TERMUX_PREFIX.substring(1), path) + ", command=" + command);
           process.exit(1);
         }
         if (!binMap.has(packageName)) {
